[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "grainchain"
version = "0.1.0"
description = "Langchain for sandboxes - A unified Python interface for sandbox providers"
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.9"
authors = [
    { name = "Codegen Team", email = "team@codegen.com" }
]
keywords = ["sandbox", "code-execution", "e2b", "daytona", "containers"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
]
dependencies = [
    "aiohttp>=3.8.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "typing-extensions>=4.0.0",
    "python-dotenv>=1.0.0",
    "click>=8.0.0",
    "e2b>=1.5.0",
]

[project.optional-dependencies]
e2b = ["e2b>=0.13.0"]
daytona = ["daytona-sdk>=0.1.0"]
langgraph = [
    "langgraph>=0.2.0",
    "langchain-core>=0.3.0",
    "langchain>=0.3.0",
]
modal = ["modal>=0.64.0"]
morph = ["morphcloud>=0.1.38"]
all = ["grainchain[e2b,daytona,modal,morph,langgraph]"]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
    "types-PyYAML>=6.0.0",
]
# Optional: Only install if you need benchmarking or data analysis examples
benchmark = [
    "docker>=6.0.0",
    "psutil>=5.9.0",
]
# Optional: Only install if you need data science examples
examples = [
    "matplotlib>=3.7.0",
    "pandas>=2.0.0",
    "numpy>=2.0.2",
]

[project.urls]
Homepage = "https://github.com/codegen-sh/grainchain"
Documentation = "https://github.com/codegen-sh/grainchain#readme"
Repository = "https://github.com/codegen-sh/grainchain"
Issues = "https://github.com/codegen-sh/grainchain/issues"

[project.scripts]
grainchain = "grainchain.cli.main:main"

[tool.hatch.version]
path = "grainchain/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["grainchain"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=grainchain",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.ruff]
line-length = 88
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by ruff formatter
    "B008", # do not perform function calls in argument defaults
]

[tool.coverage.run]
source = ["grainchain"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "jupyter>=1.1.1",
    "nbclassic>=1.3.1",
]
